#!/bin/bash

usage() {
	cat 1>&2 <<EOF
@@HELP@@
EOF
	exit 1
}

version() {
	echo "xmirror v@@VERSION@@"
	exit 0
}

# dialog colors
RED="\Z1"
WHITE="\Z7"
BOLD="\Zb"
RESET="\Zn"
INITMSG=$(fold -sw 76 <<EOF

For the best experience, choose a mirror geographically close to you, or use the Fastly Global CDN (listed in ${RED}World${RESET}). To use the default mirror (${RED}repo-default.voidlinux.org${RESET}), which can point to any Tier 1 mirror, Select ${BOLD}${RED}Default${RESET}.

Tier 1 mirrors are maintained by the Void Linux Infrastructure Team and will always have the latest packages available. Tier 2 mirrors are not managed by Void and do not have any guarantees of freshness or completeness of packages, nor are they required to sync every available architecture or sub-repository.
EOF
)
MENULABEL=$(fold -sw 74 <<EOF
Use UP and DOWN keys to navigate menus. Use TAB to switch between buttons and ENTER to select.
EOF
)

DIALOG() {
    rm -f "$ANSWER"
    dialog --colors --keep-tite --no-shadow --no-mouse \
        --backtitle "${BOLD}${WHITE}Void Linux Mirror Selector -- https://www.voidlinux.org (@@VERSION@@)${RESET}" \
        --cancel-label "Back" --aspect 20 "$@" 2>"$ANSWER"
    return $?
}

DIE() {
    rval=$1
    [ -z "$rval" ] && rval=0
    rm -f "$ANSWER" "$NEWLIST" "$LOG"
    exit "$rval"
}

check_required_programs() {
	for cmd in sed dialog xbps-install xbps-fetch; do
		command -v $cmd >/dev/null 2>&1 || ( echo "xmirror: could not find $cmd" 1>&2; exit 1 )
	done
}

check_root() {
	if [ "$(id -u)" != 0 ]; then
		echo "xmirror must run as root" 1>&2
		exit 1
	fi
}

# uses names and abbreviations from https://planetarynames.wr.usgs.gov/Abbreviations
region_name() {
	case "$1" in
		AF) echo "Africa" ;;
		AN) echo "Antarctica" ;;
		AS) echo "Asia" ;;
		EU) echo "Europe" ;;
		NA) echo "North America" ;;
		OC) echo "Oceania" ;;
		SA) echo "South and Central America" ;;
		World) echo "Globally Available" ;;
		*) echo "$1" ;;
	esac
}

get_mirrors() {
	local oldsha newsha fetchfail

	if [ -z "$NOFETCH" ]; then
		NEWLIST=$(mktemp -t xmirror-list-XXXXXXXX || DIE 1)

		oldsha=$(xbps-digest "${ROOTDIR}/usr/share/xmirror/mirrors.lst")
		newsha=$(xbps-fetch -o "$NEWLIST" "$MIRRORURL" &>/dev/null && \
			xbps-digest "$NEWLIST") || fetchfail=1

		if [ -n "$fetchfail" ]; then
			echo "xmirror: unable to fetch new mirror list" 1>&2
		elif [ "$oldsha" = "$newsha" ]; then
			echo "xmirror: new mirror list has no changes, not updating" 1>&2
		else
			echo "xmirror: updating mirrorlist in ${ROOTDIR}/usr/share/xmirror"
			mv "${ROOTDIR}/usr/share/xmirror/mirrors.lst" "${ROOTDIR}/usr/share/xmirror/mirrors.lst.old"
			cp "$NEWLIST" "${ROOTDIR}/usr/share/xmirror/mirrors.lst"
		fi
	fi

	while read -r line; do
		[[ "$line" = '#'* ]] && continue
		while IFS=$'\t' read -r region rest; do
			allmirrors["$region"]+="$rest"$'\n'
		done <<< "$line"
	done < "$MIRRORLIST"

	for region in $(printf '%s\n' "${!allmirrors[@]}" | sort -u); do
		regions+=( "$region" "$(region_name "$region")" )
	done

	regions+=( "Default" "Reset to the default mirror" )
	regions+=( "Exit" "Exit this wizard" )
}

write_mirrors_int() {
	local CONF_FILES RET REPOSITORY="$1"
	CONF_FILES="$(find "${ROOTDIR}"/usr/share/xbps.d/ -name '*-repository-*.conf' | sort -u | sed 's|/usr/share|/etc|g')"
	DIALOG --cr-wrap --yesno "${BOLD}The following operations will be executed:${RESET}\n\n
The current mirror will be switched to: ${RED}${REPOSITORY}${RESET}
The following files in ${BOLD}${ROOTDIR}/etc/xbps.d${RESET} will be overwritten, if they exist:
${RED}${CONF_FILES// /$'\n'}${RESET}\n\n
${BOLD}Do you want to continue?${RESET}" 20 80 || return

	{
		write_mirrors "$REPOSITORY"
		# shellcheck disable=SC2030
		RET="$?"
		[ "$RET" -eq 0 ] && printf "\nMirror successfully changed to %s!\n" "$REPOSITORY" \
			|| printf "\nMirror update failed! See log above for details.\n"
	} |& DIALOG --title " Updating mirror... " --programbox 16 80
	# shellcheck disable=SC2031
	DIE "$RET"
}

write_mirrors() {
	local REPOSITORY="$1"
	set -e
	mkdir -p "${ROOTDIR}/etc/xbps.d"
	cp "${ROOTDIR}/usr/share/xbps.d"/*-repository-*.conf "${ROOTDIR}/etc/xbps.d/"
	sed -i "s|https://repo-default.voidlinux.org|${REPOSITORY%/}|g" "${ROOTDIR}/etc/xbps.d"/*
	xbps-install -S -r "${ROOTDIR}"
	set +e
}

reset_mirrors_int() {
	local CONF_FILES RET
	CONF_FILES="$(find "${ROOTDIR}"/etc/xbps.d/ -name '*-repository-*.conf' | sort -u)"
	DIALOG --cr-wrap --yesno "${BOLD}The following operations will be executed:${RESET}\n\n
The current mirror will be reset to the default.
The following files in ${BOLD}${ROOTDIR}/etc/xbps.d${RESET} will be removed:
${RED}${CONF_FILES// /$'\n'}${RESET}\n\n
${BOLD}Do you want to continue?${RESET}" 20 80 || return

	{
		reset_mirrors "$REPOSITORY"
		# shellcheck disable=SC2030
		RET="$?"
		[ "$RET" -eq 0 ] && printf "\nMirror successfully reset!\n" \
			|| printf "\nMirror reset failed! See log above for details.\n"
	} |& DIALOG --title " Resetting mirror to default... " --programbox 16 80
	# shellcheck disable=SC2031
	DIE "$RET"
}

reset_mirrors() {
	set -e
	rm -f "${ROOTDIR}"/etc/xbps.d/*-repository-*.conf
	xbps-install -S -r "${ROOTDIR}"
	set +e
}

region_menu() {
	local sel
	DIALOG --title " Choose a Region " \
		--menu "$MENULABEL" 10 78 0 \
		"${regions[@]}"

	sel="$(cat "$ANSWER")"
	case $sel in
		"Exit"|'') DIE 0 ;;
		"Default") reset_mirrors_int ;;
		*) mirror_menu "$sel" ;;
	esac
}

mirror_menu() {
	local sel region="$1"
	unset mirrors
	declare -a mirrors

	while read -r line; do
		[ -z "$line" ] && continue
		while IFS=$'\t' read -r url location tier rest; do
			mirrors+=( "$url" "$location (Tier $tier)" )
		done <<< "$line"
	done <<< "${allmirrors[$region]}"

	while true; do
		DIALOG --title " Choose a Mirror (Region: $(region_name "$region")) " \
			--menu "$MENULABEL" 10 78 0 \
			"${mirrors[@]}"

		sel="$(cat "$ANSWER")"
		case $sel in
			"") return ;;
			*) write_mirrors_int "$sel" ;;
		esac
	done
}

while getopts l:r:u:s:dnvh flag; do
	case $flag in
		l) MIRRORLIST="$OPTARG" ;;
		r) ROOTDIR="$OPTARG" ;;
		u) MIRRORURL="$OPTARG" ;;
		s) SETMIRROR="$OPTARG" ;;
		d) RESETMIRROR=1 ;;
		n) NOFETCH=1 ;;
		v) version ;;
		h|?) usage ;;
	esac
done

shift $(( OPTIND - 1 ))

if [ -n "$SETMIRROR" ]; then
	check_root && {
		if write_mirrors "$SETMIRROR"; then
			echo "xmirror: mirror successfully updated to $SETMIRROR." 1>&2
			exit 0
		else
			echo "xmirror: mirror update failed." 1>&2
			exit 1
		fi
	}
fi

if [ -n "$RESETMIRROR" ]; then
	check_root && {
		if reset_mirrors "$SETMIRROR"; then
			echo "xmirror: mirror successfully reset." 1>&2
			exit 0
		else
			echo "xmirror: mirror reset failed." 1>&2
			exit 1
		fi
	}
fi

: "${MIRRORLIST:=${ROOTDIR}/usr/share/xmirror/mirrors.lst}"
: "${MIRRORURL:=https://xmirror.voidlinux.org/raw/mirrors.lst}"

declare -A allmirrors
declare -a regions

check_required_programs
check_root

trap "DIE" INT TERM QUIT

ANSWER=$(mktemp -t xmirror-XXXXXXXX || exit 1)

get_mirrors

DIALOG --title "${BOLD} Void Linux Mirror Selection Wizard ${RESET}" --msgbox "$INITMSG" 15 80

while true; do
	region_menu
done

DIE 0
# vim: set ft=bash:
