#!/bin/bash

usage() {
	cat 1>&2 <<EOF
xmirror [-dhnv] [-l mirrorlist] [-r rootdir] [-s mirrorurl]

Interactive script for changing XBPS mirrors

    -d, --default       Reset the current mirror to the default, skipping the
                        interactive TUI.
    -h, --help          Show this help and exit.
    -l, --mirror-list   Use an alternative mirror list file. This should be a
                        tab-separated value file with the columns: region, url,
                        location, tier. Default: /usr/share/xmirror/mirrors.lst
    -n, --no-fetch      Don't attempt to update the mirror list.
    -r, --rootdir       Use an alternative rootdir. Acts like xbps's -r flag.
    -s, --set           Set the current mirror to mirrorurl and exit, skipping
                        the interactive TUI.
    -v, --version       Show the version and exit.

Copyright (c) 2023 classabbyamp, released under the BSD-2-Clause license
EOF
	exit 1
}

version() {
	echo "xmirror v@@VERSION@@" 1>&2
	exit 0
}

# dialog colors
RED="\Z1"
WHITE="\Z7"
BOLD="\Zb"
RESET="\Zn"
INITMSG=$(fold -sw 76 <<EOF

For the best experience, choose a mirror geographically close to you, or use the Fastly Global CDN (listed in ${RED}World${RESET}). To use the default mirror (${RED}repo-default.voidlinux.org${RESET}), which can point to any Tier 1 mirror, Select ${BOLD}${RED}Default${RESET}.

Tier 1 mirrors are maintained by the Void Linux Infrastructure Team and will always have the latest packages available. Tier 2 mirrors are not managed by Void and do not have any guarantees of freshness or completeness of packages, nor are they required to sync every available architecture or sub-repository.
EOF
)
MENULABEL=$(fold -sw 74 <<EOF
Use UP and DOWN keys to navigate menus. Use TAB to switch between buttons and ENTER to select.
EOF
)

DIALOG() {
    rm -f "$ANSWER"
    dialog --colors --keep-tite --no-shadow --no-mouse \
        --backtitle "${BOLD}${WHITE}Void Linux Mirror Selector -- https://www.voidlinux.org (@@VERSION@@)${RESET}" \
        --cancel-label "Back" --aspect 20 "$@" 2>"$ANSWER"
    return $?
}

DIE() {
    rval=$1
    [ -z "$rval" ] && rval=0
    rm -f "$ANSWER" "$NEWLIST" "$LOG"
    exit "$rval"
}

LOG() {
	echo xmirror: "$@" 1>&2
}

check_required_programs() {
	for cmd in find sed "$@"; do
		command -v $cmd >/dev/null 2>&1 || ( LOG "could not find $cmd"; exit 1 )
	done
	XBPS_INSTALL="$(check_xbps_program install)"
	XBPS_FETCH="$(check_xbps_program fetch)"
	XBPS_DIGEST="$(check_xbps_program digest)"
}

check_xbps_program() {
	local prog="$1"
	if command -v "xbps-$prog" >/dev/null 2>&1; then
		echo "xbps-$prog"
	elif command -v "xbps-$prog.static" >/dev/null 2>&1; then
		echo "xbps-$prog.static"
	else
		LOG "xmirror: could not find xbps-$prog or xbps-$prog.static"
		exit 1
	fi
}

check_root() {
	if [ "$(id -u)" != 0 ]; then
		LOG "must be run as root"
		exit 1
	fi
}

# uses names and abbreviations from https://planetarynames.wr.usgs.gov/Abbreviations
region_name() {
	case "$1" in
		AF) echo "Africa" ;;
		AN) echo "Antarctica" ;;
		AS) echo "Asia" ;;
		EU) echo "Europe" ;;
		NA) echo "North America" ;;
		OC) echo "Oceania" ;;
		SA) echo "South and Central America" ;;
		World) echo "Globally Available" ;;
		*) echo "$1" ;;
	esac
}

get_mirrors() {
	local oldsha newsha fetchfail prefetched

	if [ -z "$NOFETCH" ]; then
		NEWLIST=$(mktemp -t xmirror-list-XXXXXXXX || exit 1)

		oldsha=$($XBPS_DIGEST "${ROOTDIR}/usr/share/xmirror/mirrors.lst")
		if $XBPS_FETCH -o "$NEWLIST" "$MIRRORURL" &>/dev/null; then
			# xbps-fetch won't download anything if the file is identical to one it's already downloaded
			if [ "$(wc -c "$NEWLIST" | cut -d' ' -f1)" -eq 0 ]; then
				prefetched=1
			else
				newsha=$($XBPS_DIGEST "$NEWLIST") || fetchfail=1
			fi
		else
			fetchfail=1
		fi

		if [ -n "$fetchfail" ]; then
			LOG "unable to fetch new mirror list"
		elif [ -n "$prefetched" ] || [ "$oldsha" = "$newsha" ]; then
			LOG "new mirror list has no changes, not updating"
		else
			LOG "updating mirrorlist in ${ROOTDIR}/usr/share/xmirror"
			cp --no-preserve=mode,ownership --backup=simple --suffix=.old \
				"$NEWLIST" "${ROOTDIR}/usr/share/xmirror/mirrors.lst"
		fi
	fi

	while read -r line; do
		[[ "$line" = '#'* ]] && continue
		while IFS=$'\t' read -r region rest; do
			allmirrors["$region"]+="$rest"$'\n'
		done <<< "$line"
	done < "$MIRRORLIST"

	for region in $(printf '%s\n' "${!allmirrors[@]}" | sort -u); do
		regions+=( "$region" "$(region_name "$region")" )
	done

	regions+=( "Default" "Reset to the default mirror" )
	regions+=( "Exit" "Exit this wizard" )
}

write_mirrors_int() {
	local CONF_FILES RET REPOSITORY="$1"
	CONF_FILES="$(find "${ROOTDIR}"/usr/share/xbps.d/ -name '*-repository-*.conf' | sort -u | sed 's|/usr/share|/etc|g')"
	DIALOG --cr-wrap --yesno "${BOLD}The following operations will be executed:${RESET}\n\n
The current mirror will be switched to: ${RED}${REPOSITORY}${RESET}
The following files in ${BOLD}${ROOTDIR}/etc/xbps.d${RESET} will be overwritten, if they exist:
${RED}${CONF_FILES// /$'\n'}${RESET}\n\n
${BOLD}Do you want to continue?${RESET}" 20 80 || return

	{
		write_mirrors "$REPOSITORY"
		# shellcheck disable=SC2030
		RET="$?"
		[ "$RET" -eq 0 ] && printf "\nMirror successfully changed to %s!\n" "$REPOSITORY" \
			|| {
				for f in "${ROOTDIR}/etc/xbps.d"/*-repository-*.conf.old; do
					mv "$f" "${f%.old}"
				done
				printf "\nMirror update failed! See log above for details.\n"
			}
	} |& DIALOG --title " Updating mirror... " --programbox 16 80
	# shellcheck disable=SC2031
	DIE "$RET"
}

write_mirrors() {
	local REPOSITORY="$1"
	if ! [[ "$REPOSITORY" =~ "http://"* || "$REPOSITORY" =~ "https://"* ]]; then
		LOG "warning: mirror protocol not specified, assuming http://"
		REPOSITORY="http://$REPOSITORY"
	fi
	mkdir -p "${ROOTDIR}/etc/xbps.d" || return 1
	cp --no-preserve=mode,ownership --backup=simple --suffix=.old \
		"${ROOTDIR}/usr/share/xbps.d"/*-repository-*.conf "${ROOTDIR}/etc/xbps.d/" || return 1
	sed -i "s|https://repo-default.voidlinux.org|${REPOSITORY%/}|g" "${ROOTDIR}/etc/xbps.d"/* || return 1
	$XBPS_INSTALL -S -r "${ROOTDIR}" || return 1
}

reset_mirrors_int() {
	local CONF_FILES RET
	CONF_FILES="$(find "${ROOTDIR}"/usr/share/xbps.d/ -name '*-repository-*.conf' | sort -u | sed 's|/usr/share|/etc|g')"
	DIALOG --cr-wrap --yesno "${BOLD}The following operations will be executed:${RESET}\n\n
The current mirror will be reset to the default.
The following files in ${BOLD}${ROOTDIR}/etc/xbps.d${RESET} will be removed, if they exist:
${RED}${CONF_FILES// /$'\n'}${RESET}\n\n
${BOLD}Do you want to continue?${RESET}" 20 80 || return

	{
		reset_mirrors "$CONF_FILES"
		# shellcheck disable=SC2030
		RET="$?"
		[ "$RET" -eq 0 ] && printf "\nMirror successfully reset!\n" \
			|| printf "\nMirror reset failed! See log above for details.\n"
	} |& DIALOG --title " Resetting mirror to default... " --programbox 16 80
	# shellcheck disable=SC2031
	DIE "$RET"
}

reset_mirrors() {
	FILES="$1"
	rm -f $FILES || return 1
	$XBPS_INSTALL -S -r "${ROOTDIR}" || return 1
}

region_menu() {
	local sel
	DIALOG --title " Choose a Region " \
		--menu "$MENULABEL" 10 78 0 \
		"${regions[@]}"

	sel="$(cat "$ANSWER")"
	case $sel in
		"Exit"|'') DIE 0 ;;
		"Default") reset_mirrors_int ;;
		*) mirror_menu "$sel" ;;
	esac
}

mirror_menu() {
	local sel region="$1"
	unset mirrors
	declare -a mirrors

	while read -r line; do
		[ -z "$line" ] && continue
		while IFS=$'\t' read -r url location tier rest; do
			mirrors+=( "$url" "$location (Tier $tier)" )
		done <<< "$line"
	done <<< "${allmirrors[$region]}"

	while true; do
		DIALOG --title " Choose a Mirror (Region: $(region_name "$region")) " \
			--menu "$MENULABEL" 10 78 0 \
			"${mirrors[@]}"

		sel="$(cat "$ANSWER")"
		case $sel in
			"") return ;;
			*) write_mirrors_int "$sel" ;;
		esac
	done
}

TEMP=$(getopt -o 'l:r:s:dnvh' --long 'mirror-list:,rootdir:,set:,default,no-fetch,version,help' -n xmirror -- "$@")

if [ $? -ne 0 ]; then
	usage
fi

eval set -- "$TEMP"
unset TEMP

while true; do
	case $1 in
		'-l'|'--mirror-list') MIRRORLIST="$2"; shift 2; continue ;;
		'-r'|'--rootdir')     ROOTDIR="$2";    shift 2; continue ;;
		'-s'|'--set')         SETMIRROR="$2";  shift 2; continue ;;
		'-d'|'--default')     RESETMIRROR=1;   shift;   continue ;;
		'-n'|'--no-fetch')    NOFETCH=1;       shift;   continue ;;
		'-v'|'--version')     version ;;
		'-h'|'--help')        usage ;;
		''|'--')              break ;;
		*)                    usage ;;
	esac
done

check_root

if [ -n "$SETMIRROR" ]; then
	check_required_programs && {
		LOG "updating mirror to $SETMIRROR..."
		if write_mirrors "$SETMIRROR"; then
			LOG "mirror successfully updated to $SETMIRROR."
			exit 0
		else
			for f in "${ROOTDIR}/etc/xbps.d"/*-repository-*.conf.old; do
				mv "$f" "${f%.old}"
			done
			LOG "mirror update failed."
			exit 1
		fi
	}
fi

if [ -n "$RESETMIRROR" ]; then
	check_required_programs && {
		LOG "xmirror: resetting mirror..."
		FILES="$(find "${ROOTDIR}"/usr/share/xbps.d/ -name '*-repository-*.conf' | sort -u | sed 's|/usr/share|/etc|g')"
		if reset_mirrors "$FILES"; then
			LOG "xmirror: mirror successfully reset."
			exit 0
		else
			LOG "xmirror: mirror reset failed."
			exit 1
		fi
	}
fi

: "${MIRRORLIST:=${ROOTDIR}/usr/share/xmirror/mirrors.lst}"
: "${MIRRORURL:=@@MIRRORURL@@}"

declare -A allmirrors
declare -a regions

check_required_programs dialog

trap "DIE" INT TERM QUIT

get_mirrors

ANSWER=$(mktemp -t xmirror-XXXXXXXX || exit 1)

DIALOG --title "${BOLD} Void Linux Mirror Selection Wizard ${RESET}" --msgbox "$INITMSG" 15 80

while true; do
	region_menu
done

DIE 0
# vim: set ft=bash:
